#!/bin/sh

if [ -z $CXX ]
then
	CXX=g++
fi

if [ -z $CC ]
then
	CC=gcc
fi

if [ -z $SDL_CONFIG ]
then
	SDL_CONFIG=sdl-config
fi

prefix=/usr/local
sound=1
nobundle=1
universal=1
force=0
debug=0
upgrade_nag=1
server=1
client=1
metaserver=0
serverscanner=0

if [ `uname -s` = Darwin ]
then
	nobundle=0
fi

display_help () {
	echo "Usage: $0 [OPTION]"
	echo "Options:"
	echo "  --prefix=PREFIX          Install Leges Motus program and data at PREFIX [default: $prefix]"
	echo "  --bindir=DIR             Install executable binaries at DIR [default: PREFIX/bin]"
	echo "  --mandir=DIR             Install manual pages at DIR [default: PREFIX/man]"
	echo "  --datadir=DIR            Install data files at DIR [default: PREFIX/share/games/legesmotus]"
	echo "  --sharedir=DIR           Install shared files at DIR [default: PREFIX/share]"
	echo "  --disable-sound          Disable sound support in this build"
	echo "  --disable-upgrade-check  Disable upgrade checking in this build"
	echo "  --disable-client         Disable building the client"
	echo "  --disable-server         Disable building the server"
	echo "  --enable-metaserver      Enable building the metaserver"
	echo "  --enable-serverscanner   Enable building the server scanner"
	echo "  --debug                  Enable a debug build"
	echo "  --disable-bundle         (Mac OS X only) Build without frameworks or .app bundle"
	echo "  --disable-universal      (Mac OS X only) Do not build universal binary"
	echo "  --force                  Force configure to continue even if required libraries aren't found"
	echo "  --help                   Display this help"
	echo
	echo "Influential environment variables:"
	echo "  CC		C/Objective-C compiler command"
	echo "  CFLAGS	C/Objective-C compiler flags"
	echo "  CXX		C++ compiler command"
	echo "  CXXFLAGS	C++ compiler flags"
	echo "  LDFLAGS	linker flags"
	echo "  SDL_CONFIG	sdl-config command"
}

format_boolean () {
	if [ $1 -ne 0 ]
	then
		echo "Yes"
	else
		echo "No"
	fi
}

find_sdl_include () {
	for part in `$SDL_CONFIG --cflags`
	do
		if echo "$part" | grep "^-I" >/dev/null
		then
			if [ -f `echo "$part" | cut -c3-`/$1 ]
			then
				return 0
			fi
		fi
	done
	return 1
}

die () {
	if [ $force -eq 0 ]
	then
		exit 1
	fi
}

# Check args

for arg
do
	case $arg in
	--help)
		display_help
		exit 0
		;;
	--prefix=*)
		prefix="`echo "$arg" | cut -f2 -d=`"
		;;
	--bindir=*)
		bindir="`echo "$arg" | cut -f2 -d=`"
		;;
	--mandir=*)
		mandir="`echo "$arg" | cut -f2 -d=`"
		;;
	--datadir=*)
		datadir="`echo "$arg" | cut -f2 -d=`"
		;;
	--sharedir=*)
		sharedir="`echo "$arg" | cut -f2 -d=`"
		;;
	--debug)
		debug=1
		;;
	--disable-bundle)
		nobundle=1
		;;
	--disable-sound)
		sound=0
		;;
	--disable-upgrade-check)
		upgrade_nag=0
		;;
	--disable-universal)
		universal=0
		;;
	--disable-client)
		client=0
		;;
	--disable-server)
		server=0
		;;
	--enable-metaserver)
		metaserver=1
		;;
	--enable-serverscanner)
		serverscanner=1
		;;
	--force)
		force=1
		;;
	*)
		echo "$arg: Unknown argument" >&2
		display_help
		exit 2
		;;
	esac
done


# Set targets

targets=""
if [ $client -eq 1 ]
then
	targets="$targets client"
fi

if [ $server -eq 1 ]
then
	targets="$targets server"
fi

if [ $metaserver -eq 1 ]
then
	targets="$targets metaserver"
fi

if [ $serverscanner -eq 1 ]
then
	targets="$targets serverscanner"
fi

# Set defaults

if [ -z $bindir ]
then
	bindir="$prefix/bin"
fi

if [ $nobundle -eq 1 ]
then
	if [ -z $mandir ]
	then
		mandir="$prefix/man"
	fi

	if [ -z $datadir ]
	then
		datadir="$prefix/share/games/legesmotus"
	fi

	if [ -z $sharedir ]
	then
		sharedir="$prefix/share"
	fi
else
	if [ -z $mandir ]
	then
		mandir="$prefix/share/man"
	fi

	if [ -z $datadir ]
	then
		datadir="/Applications/Leges Motus.app/Contents/Resources/data"
	fi

	if [ -z $sharedir ]
	then
		sharedir="$prefix/share"
	fi
fi


if [ ! "$targets" ]
then
	echo "You must build at least one of the client, server, or metaserver"
	die
fi


printf '%s' "Checking for g++... "
if which $CXX >/dev/null 2>/dev/null && $CXX --version | grep g++ >/dev/null 2>/dev/null
then
	echo "Found"
else
	echo "Not found"
	echo
	echo "g++ (the C++ compiler from the GNU Compiler Connection (gcc)) is required to build Leges Motus."
	echo "Please install the appropriate g++ package for your distro."
	echo "It will typically be categorized as a development package."
	die
fi

if [ $client -eq 1 ] && [ $nobundle -eq 1 ]
then
	printf '%s' "Checking for SDL... "
	if $SDL_CONFIG --version >/dev/null 2>/dev/null
	then
		echo "Found"
	else
		echo "Not found"
		echo
		echo "SDL is required to build and run Leges Motus."
		echo "You can obtain SDL from http://www.libsdl.org/"
		echo "or install the appropriate package for your distro."
		echo "If you install a distro package, please make sure you also install the -devel package."
		die
	fi
	printf '%s' "Checking for SDL_image... "
	if find_sdl_include SDL_image.h
	then
		echo "Found"
	else
		echo "Not found"
		echo
		echo "SDL_image is required to build and run Leges Motus."
		echo "You can obtain SDL_image from http://www.libsdl.org/projects/SDL_image/"
		echo "or install the appropriate package for your distro."
		echo "If you install a distro package, please make sure you also install the -devel package."
		die
	fi
	printf '%s' "Checking for SDL_ttf... "
	if find_sdl_include SDL_ttf.h
	then
		echo "Found"
	else
		echo "Not found"
		echo
		echo "SDL_ttf is required to build and run Leges Motus."
		echo "You can obtain SDL_ttf from http://www.libsdl.org/projects/SDL_ttf/"
		echo "or install the appropriate package for your distro."
		echo "If you install a distro package, please make sure you also install the -devel package."
		die
	fi
	if [ $sound -ne 0 ]
	then
		printf '%s' "Checking for SDL_mixer... "
		if find_sdl_include SDL_mixer.h
		then
			echo "Found"
		else
			echo "Not found"
			echo
			echo "SDL_mixer is required to build and run Leges Motus."
			echo "You can obtain SDL_mixer from http://www.libsdl.org/projects/SDL_mixer/"
			echo "or install the appropriate package for your distro."
			echo "If you install a distro package, please make sure you also install the -devel package."
			echo
			echo "If you don't feel like installing SDL_mixer, you can compile without sound support by passing the --disable-sound option to configure."
			die
		fi
	fi
fi


echo
echo
echo "Prefix:             $prefix"
echo "Binaries directory: $bindir"
echo "Manuals directory:  $mandir"
echo "Data directory:     $datadir"
echo "Share directory:    $sharedir"
echo "Client:             `format_boolean $client`"
echo "Server:             `format_boolean $server`"
echo "Metaserver:         `format_boolean $metaserver`"
echo "Server scanner:     `format_boolean $serverscanner`"

if [ $client -eq 1 ]
then
	echo "Sound:              `format_boolean $sound`"
	echo "Upgrade check:      `format_boolean $upgrade_nag`"
fi

echo "Debug:              `format_boolean $debug`"

if [ `uname -s` = Darwin ]
then
	echo "Bundle build:       `format_boolean $(( ! $nobundle ))`"
	echo "Universal build:    `format_boolean $universal`"
fi

echo

if [ $nobundle -eq 0 ]
then
	echo "Type 'make' to build and then 'make install' to install into the Applications directory."
else
	echo "Type 'make' to build and then 'make install' to install into $prefix."
fi

echo '#' > config.mk
echo '# This file was generated by running configure' >> config.mk
echo '#' >> config.mk
echo >> config.mk

echo "PREFIX = \"${prefix}\"" >> config.mk
echo "BINDIR = \"${bindir}\"" >> config.mk
echo "MANDIR = \"${mandir}\"" >> config.mk
echo "DATADIR = \"${datadir}\"" >> config.mk
echo "SHAREDIR = \"${sharedir}\"" >> config.mk
echo "TARGETS =${targets}" >> config.mk

if [ $sound -ne 0 ]
then
	echo "NOSOUND =" >> config.mk
else
	echo "NOSOUND = 1" >> config.mk
fi
if [ $upgrade_nag -ne 0 ]
then
	echo "NO_UPGRADE_NAG =" >> config.mk
else
	echo "NO_UPGRADE_NAG = 1" >> config.mk
fi
if [ $universal -ne 0 ]
then
	echo "UNIVERSAL = 1" >> config.mk
else
	echo "UNIVERSAL =" >> config.mk
fi
if [ $debug -ne 0 ]
then
	echo "DEBUG = 1" >> config.mk
else
	echo "DEBUG =" >> config.mk
fi
if [ $nobundle -ne 0 ]
then
	echo "NOBUNDLE = 1" >> config.mk
else
	echo "NOBUNDLE =" >> config.mk
fi

echo "CC = $CC" >> config.mk
echo "CXX = $CXX" >> config.mk
echo "SDL_CONIFG = $SDL_CONFIG" >> config.mk
echo "CFLAGS += $CFLAGS" >> config.mk
echo "CXXFLAGS += $CXXFLAGS" >> config.mk
echo "LDFLAGS += $LDFLAGS" >> config.mk
